<?xml version="1.0" encoding="UTF-8"?>
<!-- 根节点configuration:
	- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true
	- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟
	- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false
 -->
<configuration  scan="true" scanPeriod="60 seconds" debug="false">
    <!-- 上下文名称contextName,默认为default -->
    <contextName>matrix-backend</contextName>
    <!-- 定义变量值property(变量会被插入logger上下文，可以通过${}形式获取)
    	-name:变量名称
    	-value:变量值
     -->
    <!-- 读取application.properties文件中的logging.path配置值 -->
    <springProperty scope="context" name="LOG_PATH" source="logging.file.path" />
    <springProperty scope="context" name="LOG_LEVEL" source="logging.level.root" defaultValue="INFO"/>

    <!--子节点1：appender【格式化日志输出节点】
    	- name:名称
    	- class:输出策略，有如下几种
    		- ConsoleAppender：输出到控制台
    		- RollingFileAppender【常用】：滚动记录文件(记录到文件，打到指定条件(时间，大小)，转移到另一个文件)
    		- FileAppender：输出到文件
    		- SocketAppender/SSLSocketAppender:输出日志到远程实例(明码/加密)
    		- ServerSocketAppender/SSLSeverSocketAppender:被动连接远程日志服务器(它监听来自客户端的连接请求)
			- SMTPAppender:邮件发送
			- DBAppender：可以将日志事件插入到3张数据表中：logging_event，logging_event_property，logging_event_exception
    -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 %L行号-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss}|%-5level|[%thread]|%contextName|LogInfo: %logger{36}[%L] -%msg%n</pattern>
        </encoder>
    </appender>

    <appender name="info_file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 日志名称 -->
        <File>${LOG_PATH}/info.log</File>
        <!-- 日志级别 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>${LOG_LEVEL}</level>
        </filter>
        <!-- 滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/info-%d{yyyyMMdd}.%i.log</fileNamePattern>
            <!-- 单个文件最大值 -->
            <maxFileSize>10MB</maxFileSize>
            <!-- 归档文件最大值 -->
            <totalSizeCap>1GB</totalSizeCap>
            <!-- 最大保留日期，单位为滚动单位 -->
            <maxHistory>2</maxHistory>
            <!-- appender启动时删除归档，默认为false，即轮转时异步删除 -->
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
            <!--TriggeringPolicy 的实现用于通知RollingFileAppender 何时轮转-->
            <!-- <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy> -->
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <Pattern>%d{yyyy-MM-dd HH:mm:ss}|%-5level|[%thread]|%contextName|LogInfo: %logger{36}[%L] -%msg%n</Pattern>
            <charset>UTF-8</charset> <!-- 此处设置字符集 -->
        </encoder>
    </appender>

    <appender name="file_beat" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 日志名称 -->
        <File>${LOG_PATH}/externalSync.log</File>
        <!-- 日志级别 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>${LOG_LEVEL}</level>
        </filter>
        <!-- 滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/externalSync-%d{yyyyMMdd}.%i.log</fileNamePattern>
            <!-- 单个文件最大值 -->
            <maxFileSize>10MB</maxFileSize>
            <!-- 归档文件最大值 -->
            <totalSizeCap>1GB</totalSizeCap>
            <!-- 最大保留日期，单位为滚动单位 -->
            <maxHistory>2</maxHistory>
            <!-- appender启动时删除归档，默认为false，即轮转时异步删除 -->
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
            <!--TriggeringPolicy 的实现用于通知RollingFileAppender 何时轮转-->
            <!-- <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy> -->
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <Pattern>%d{yyyy-MM-dd HH:mm:ss}|%-5level|[%thread]|%contextName|LogInfo: %logger{36}[%L] -%msg%n</Pattern>
            <charset>UTF-8</charset> <!-- 此处设置字符集 -->
        </encoder>
    </appender>

    <appender name="error_file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <File>${LOG_PATH}/error.log</File>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/error-%d{yyyyMMdd}.%i.log</fileNamePattern>
            <!-- 单个文件最大值 -->
            <maxFileSize>10MB</maxFileSize>
            <!-- 归档文件最大值 -->
            <totalSizeCap>1GB</totalSizeCap>
            <!-- 最大保留日期，单位为滚动单位 -->
            <maxHistory>2</maxHistory>
            <!-- appender启动时删除归档，默认为false，即轮转时异步删除 -->
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
            <!--TriggeringPolicy 的实现用于通知RollingFileAppender 何时轮转-->
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <Pattern>%d{yyyy-MM-dd HH:mm:ss}|%-5level|[%thread]|%contextName|LogInfo: %logger{36}[%L] -%msg%n</Pattern>
            <charset>UTF-8</charset> <!-- 此处设置字符集 -->
        </encoder>
    </appender>

    <!-- 子节点2：root【用来指定最基础的日志输出级别(必选)】
        - 只有一个level属性
    -->
    <root level="info">
        <appender-ref ref="info_file" />
        <appender-ref ref="console" />
    </root>
    <root level="error">
        <appender-ref ref="error_file" />
        <appender-ref ref="console" />
    </root>
    <!-- 子节点3：logger 【用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>】
    	- name(必选)：受此logger约束的某一个包或者具体的某一个类
    	- level：打印级别，大小写无关
    	- addtivity：是否向上级logger传递打印信息。默认是true
     -->
    <logger name="com.bamboocloud.handler.LogAspect" level="info">
        <appender-ref ref="file_beat" />
    </logger>
</configuration>